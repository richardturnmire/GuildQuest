@model GuildQuest.UI.Models.VehicleViewModel

@{
    ViewBag.Title = "Add Vehicle";
    var imgAlt = @Url.Content("~/Content/Images/540x360.png");
}
 <p>
    <h2>Add Vehicle</h2>
</p>

@using (Html.BeginForm("AddVehicle", "Admin", FormMethod.Post, htmlAttributes: new { enctype = "multipart/form-data", @class = "form-horizontal", @id = "editVehicleForm" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
     

    <hr />

    <div class="form-inline">
        <div class="col-6">
            <div class="row">
                <div class="col-4">
                    @Html.LabelFor(model => model.Year, "Year :", htmlAttributes: new { @class = "form-control-label" })
                </div>
                <div class="col-3">
                    @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @class = "form-control" } })
                </div>
                @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-6">
            <div class="row">
                <div class="col-4 text-right">
                    @Html.LabelFor(model => model.VINumber, "VIN", htmlAttributes: new { @class = "form-control-label" })
                </div>
                <div class="col-6">
                    @Html.EditorFor(model => model.VINumber, new { htmlAttributes = new { @class = "form-control" } })
                </div>
                @Html.ValidationMessageFor(model => model.VINumber, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-inline align-content-md-end">
        <div class="col-6">
            <div class="row">
                <div class="col-4">
                    @Html.LabelFor(model => model.MakeId, "Make", htmlAttributes: new { @class = "form-control-label text-right ml-auto" })
                </div>
                <div class="col-6">
                    @Html.DropDownList("MakeId", null, string.Empty, htmlAttributes: new { @class = "form-control" })
                </div>
                @Html.ValidationMessageFor(model => model.MakeId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-6">
            <div class="row">
                <div class="col-4">
                    @Html.LabelFor(model => model.ModelId, "Model", htmlAttributes: new { @class = "form-control-label" })
                </div>
                <div class="col-6">
                    @Html.DropDownList("ModelId", null, string.Empty, htmlAttributes: new { @class = "form-control" })
                </div>
                @Html.ValidationMessageFor(model => model.ModelId, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

   
    <div class="form-inline">
        <div class="col-6">
            <div class="row">
                <div class="col-4">
                    @Html.LabelFor(model => model.BodyStyleID, "Body Style", htmlAttributes: new { @class = "form-control-label" })
                </div>
                <div class="col-6">
                    @Html.DropDownList("BodyStyleID", null, string.Empty, htmlAttributes: new { @class = "form-control" })
                </div>
                @Html.ValidationMessageFor(model => model.BodyStyleID, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-6">
            <div class="row">
                <div class="col-4">
                    @Html.LabelFor(model => model.TransmissionTypeID, "Transmission Type", htmlAttributes: new { @class = "form-control-label" })
                </div>
                <div class="col-6">
                    @Html.DropDownList("TransmissionTypeID", null, string.Empty, htmlAttributes: new { @class = "form-control" })
                </div>
                @Html.ValidationMessageFor(model => model.TransmissionTypeID, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-inline">
        <div class="col-6">
            <div class="row">
                <div class="col-4">
                    @Html.LabelFor(model => model.ExteriorColorID, "Exterior Color", htmlAttributes: new { @class = "form-control-label" })
                </div>
                <div class="col-6">
                    @Html.DropDownList("ExteriorColorID", null, string.Empty, htmlAttributes: new { @class = "form-control" })
                </div>
                @Html.ValidationMessageFor(model => model.ExteriorColorID, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-6">
            <div class="row">
                <div class="col-4">
                    @Html.LabelFor(model => model.SalesPrice, "Sale Price", htmlAttributes: new { @class = "form-control-label" })

                </div>
                <div class="col-3">
                    @Html.EditorFor(model => model.SalesPrice, new { htmlAttributes = new { @class = "form-control text-right pr-1" } })
                </div>
                @Html.ValidationMessageFor(model => model.SalesPrice, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-inline">
        <div class="col-6">
            <div class="row">
                <div class="col-4">
                    @Html.LabelFor(model => model.InteriorColorID, "Interior Color", htmlAttributes: new { @class = "form-control-label" })
                </div>
                <div class="col-6">
                    @Html.DropDownList("InteriorColorID", null, string.Empty, htmlAttributes: new { @class = "form-control" })
                </div>
                @Html.ValidationMessageFor(model => model.InteriorColorID, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-6">
            <div class="row">
                <div class="col-4">
                    @Html.LabelFor(model => model.MSRPrice, "MSRP", htmlAttributes: new { @class = "form-control-label" })
                </div>
                <div class="col-3">
                    @Html.EditorFor(model => model.MSRPrice, new { htmlAttributes = new { @class = "form-control text-right pr-1" } })
                </div>
                @Html.ValidationMessageFor(model => model.MSRPrice, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-inline">
        @*<div class="col-6">
            <div class="row">
                <div class="col-4">
                    @Html.LabelFor(model => model.InteriorColorID, "Interior Color", htmlAttributes: new { @class = "form-control-label" })
                </div>
                <div class="col-6">
                    @Html.DropDownList("InteriorColorID", null, string.Empty, htmlAttributes: new { @class = "form-control" })
                </div>
                @Html.ValidationMessageFor(model => model.InteriorColorID, "", new { @class = "text-danger" })
            </div>
        </div>*@
        <div class="col-6">
            <div class="row">
                <div class="col-4">
                    @Html.LabelFor(model => model.Mileage, "Mileage", htmlAttributes: new { @class = "form-control-label" })
                </div>
                <div class="col-3">
                    @Html.EditorFor(model => model.Mileage, new { htmlAttributes = new { @class = "form-control text-right pr-1" } })
                </div>
                @Html.ValidationMessageFor(model => model.Mileage, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <hr />

    <div class="form-inline ">
        <div class="col-10">
            <div class="row">
                <div class="col-4">
                    @Html.LabelFor(model => model.Description, "Description", htmlAttributes: new { @class = "form-control-label float-left", @id = "labelDescription" })
                </div>
                <div class="col-8">

                    @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "form-control float-right " }, rows = 10, cols = 80 })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>
    </div>

    <hr />

    <div class="row">
        <input type="file" id="FileUpload" name="FileUpload" accept="image/*" />
    </div>
    <div class="row">
        <div class="col-md-3" id="origImage">
            <img class="img-fluid img-thumbnail" src=@imgAlt>
        </div>
    </div>
    <div class="row my-3">
        <input type="submit" value="Save">
    </div>

}

    

@section Scripts {
    <script>
        document.getElementById('FileUpload').addEventListener('change', function () {
            for (var i = 0; i < this.files.length; i++) {
                var file = this.files[i];
                // This code is only for demo ...
                console.group("File " + i);
                console.log("name : " + file.name);
                console.log("size : " + file.size);
                console.log("type : " + file.type);
                console.log("date : " + file.lastModified);

                console.groupEnd();
                previewImage(file);
            }
        }, false);

       
        function previewImage(file) {
            var galleryId = "origImage";

            var gallery = document.getElementById(galleryId);

            while (gallery.firstChild) {
                gallery.removeChild(gallery.firstChild);
            }

            var imageType = /image.*/;

            if (!file.type.match(imageType)) {
                throw "File Type must be an image";
            }

            var img = document.createElement("img");
            img.file = file;
            img.classList.add('img-fluid'); // Add the class thumbnail to the created div
            img.classList.add('img-thumbnail');

            gallery.appendChild(img);

            // Using FileReader to display the image content
            var reader = new FileReader();
            reader.onload = (function (aImg) { return function (e) { aImg.src = e.target.result; }; })(img);
            reader.readAsDataURL(file);
        }

    </script>
    <script type="text/javascript">
        $(document).ready(function () {


            // Dropdown list change event.
            $('#MakeId').change(function() {
                $make = $('#MakeId').val();
                $models = $('#ModelId');
                
                $.getJSON('/API/GetModelsByMakeId/' + $make)
                    .done(function(result) {
                        var items = [];

                        $models.empty()
                            .append($('<option />',
                                {
                                    value: '',

                                    text: "select",
                                    selected: true,
                                    disabled: true
                                }));

                        $.each(result,
                            function(index, item) {
                                items.push('<option value="' + item.value + '">' + item.text + '</option>');
                            });
                        $models.html(items.join(''));
                    })
                    .fail(function(jqXHR) { console.log(jqXHR.responseText) });
            });
        });

    </script>

    <script>
        $(function(){


            var $models = $('#ModelId');
            var $make = $('#MakeId');

            function getModelsByMakeId() {
                $.getJSON('/API/GetModelsByMake?Id=' + $make.val())
                    .done(function(result) {
                        var items = [];

                        $models.empty()
                            .append($('<option />',
                                {
                                    value: '',
                                    text: "select",
                                    selected: true,
                                    disabled: true
                                }));

                        $.each(result,
                            function(index, item) {
                                items.push('<option value="' + item.value + '">' + item.text + '</option>');
                            });
                        $models.html(items.join(''));
                    })
                    .fail(function(jqXHR) { console.log(jqXHR.responseText) });
            }
        });



    </script>
   
<script src="https://cdn.ckeditor.com/ckeditor5/1.0.0-alpha.1/classic/ckeditor.js"></script>
    <script>
        ClassicEditor
            .create(document.querySelector('#Description'))
            .catch(error => {
                console.error(error);
            });
    </script>
    @Scripts.Render("~/bundles/jqueryval")
}

