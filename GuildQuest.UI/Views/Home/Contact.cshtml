@using GuildQuest.UI.Models
@model ContactViewModel

@{
    ViewBag.Title = "Contact Us";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-md-3">
            <h2 class="display:7">@ViewBag.Title.</h2>

        </div>
    </div>

    <div class="row" style="font-size: 18px; display: flex;">
        <div class="col-md-2">
            <p></p>
            <address>
                252 E. Market Street<br />
                Louisville, KY 40202<br />
                <abbr title="Phone">P:</abbr>
                502.555.1234
            </address>
        </div>

        <div class="col-md-5" id="contactForm">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true)
                <div class="form-group">
                    <div class="form-group row">
                        <div class="col-sm-2">
                            @Html.LabelFor(model => model.Name)
                        </div>
                        <div class="col-sm-10">
                            @Html.EditorFor(model => model.Name)
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger bg-warning" })
                        </div>
                    </div>

                    <div class="form-group row">
                        <div class="col-sm-2">
                            @Html.LabelFor(model => model.Email)
                        </div>
                        <div class="col-sm-10">
                            @Html.EditorFor(model => model.Email)
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        <div class="col-sm-2">
                            @Html.LabelFor(model => model.Phone)
                        </div>
                        <div class="col-sm-10">
                            @Html.EditorFor(model => model.Phone)
                            @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row mb-4">
                        <div class="col-sm-2">
                            @Html.LabelFor(model => model.Subject)
                        </div>
                        <div class="col-sm-10">
                            @Html.EditorFor(model => model.Subject)
                            @Html.ValidationMessageFor(model => model.Subject, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        <div class="col-sm-2">
                            @Html.LabelFor(model => model.Message)
                        </div>
                        <div class="col-sm-10">
                            @Html.TextAreaFor(model => model.Message, 9, 8, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Message, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <button type="submit" class="btn btn-primary">Submit</button>
            }
        </div>

        <div class="col-md-4">
            <div id="map" class="col" style="width: 100%; min-height: 300px;  background-color: grey;">

            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript" src="~/Scripts/GoogleKeys.js"></script>  
    <script>
        var mykey = 'https://maps.googleapis.com/maps/api/js?key='.concat(config.MAP_KEY).concat('&callback=initMap');
        var script = document.createElement('script');
        script.src = mykey;
        script.async = true;
        script.defer = true;
        document.body.appendChild(script);
    </script>
    <script>
        function initMap() {
            var guild = { lat: 38.2539326, lng: -85.7485225 };
            var map = new google.maps.Map(document.getElementById('map'), {
                zoom: 16,
                center: guild
            });
            var marker = new google.maps.Marker({
                position: guild,
                map: map
            });
            var circle = new google.maps.Circle({
                strokeColor: '#FF0000',
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: '#FF0000',
                fillOpacity: 0.15,
                map: map,
                center: guild,
                radius: 200
            });
        }

    </script>

   
}
